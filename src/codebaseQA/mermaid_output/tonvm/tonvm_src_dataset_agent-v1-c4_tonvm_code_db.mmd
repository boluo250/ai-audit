## 业务流程总结

tonvm_db 项目是TON虚拟机的核心数据库系统，提供了完整的Cell存储、管理和访问功能。核心业务流程包括：

1. **数据库初始化和配置** - DynamicBagOfCellsDbImpl、CellDbReaderImpl等核心组件的构造和初始化
2. **Cell存储和加载** - 通过CellLoader、CellStorer实现Cell的序列化和反序列化
3. **多种存储后端支持** - 包括内存存储(MapStorage)、文件存储、哈希存储等
4. **静态和动态BOC管理** - StaticBagOfCellsDb系列和DynamicBocCellLoader提供不同场景的Cell访问
5. **线程安全和并发控制** - TsVector、SeqLock、ParallelRunner等确保多线程环境下的数据一致性
6. **智能合约支持** - SmartContractDbImpl和SmartContractMeta提供合约状态管理
7. **Blob数据视图** - BlobView系列提供灵活的数据访问方式，支持内存缓冲区和文件映射
8. **事务管理** - TonDbTransactionImpl提供完整的事务支持

所有组件都包含完整的getter/setter方法、构造/析构函数，以及核心业务逻辑函数，形成了一个完整的数据库生态系统。

## 优化后的完整业务流程图

```mermaid
sequenceDiagram
    participant User as User/Client
    participant DBOC as DynamicBagOfCellsDbImpl
    participant Reader as CellDbReaderImpl
    participant HashTable as HashTable
    participant CellLoader as CellLoader
    participant CellStorer as CellStorer
    participant Counter as ThreadSafeCounter
    participant RootCell as RootCell
    participant StaticBOC as StaticBagOfCellsDb
    participant StaticBaseline as StaticBagOfCellsDbBaseline
    participant StaticLazy as StaticBagOfCellsDbLazy
    participant StaticExtCell as StaticBocExtCell
    participant DummyStorage as DummyStorage
    participant MapStorage as MapStorage
    participant HashStorage as HashStorage
    participant TsVector as TsVector
    participant DynamicBocCellLoader as DynamicBocCellLoader
    participant SeqLock as SeqLock
    participant CellInfo as CellInfo
    participant ParallelRunner as ParallelRunner
    participant UniqueAccess as UniqueAccess
    participant ArenaAllocator as ArenaAllocator
    participant CellCounter as CellCounter
    participant CellHashTable as CellHashTable
    participant DenseCellHashTable as DenseCellHashTable
    participant SmartContractMeta as SmartContractMeta
    participant SmartContractDbImpl as SmartContractDbImpl
    participant TonDbTransactionImpl as TonDbTransactionImpl
    participant KeyValue as KeyValue
    participant BagOfCells as BagOfCells
    participant ExtCellCreator as ExtCellCreator
    participant StorerT as StorerT
    participant ParserT as ParserT
    participant BlobView as BlobView
    participant BufferSliceBlobView as BufferSliceBlobView
    participant BufferSliceBlobViewImpl as BufferSliceBlobViewImpl
    participant FileBlobViewImpl as FileBlobViewImpl
    participant FileBlobView as FileBlobView
    participant FileMemoryMappingBlobView as FileMemoryMappingBlobView
    participant FileMemoryMappingBlobViewImpl as FileMemoryMappingBlobViewImpl
    participant FileFd as FileFd
    participant MemoryMapping as MemoryMapping

    %% ===== 系统初始化阶段 =====
    Note over User, MemoryMapping: 🚀 系统初始化阶段 - 核心组件构造和配置

    %% 核心数据库组件初始化
    User->>DBOC: DynamicBagOfCellsDbImpl()
    DBOC->>Counter: get_thread_safe_counter().add(1)
    DBOC->>DBOC: 初始化内部状态
    
    User->>Reader: CellDbReaderImpl(db)
    Reader->>Reader: db_(db)
    Reader->>Reader: 设置读取器状态
    
    %% 计数器和统计组件初始化
    User->>Counter: ThreadSafeCounter()
    Counter->>Counter: 初始化原子计数器
    
    User->>CellCounter: CellCounter()
    CellCounter->>CellCounter: 初始化计数器
    
    User->>CellInfo: CellInfo()
    CellInfo->>CellInfo: 初始化cell_info_
    
    User->>CellInfo: get_thread_safe_counter()
    CellInfo-->>User: thread_safe_counter

    %% ===== 存储后端初始化阶段 =====
    Note over User, MemoryMapping: 💾 存储后端初始化 - 多种存储方式配置

    User->>DummyStorage: DummyStorage()
    DummyStorage->>DummyStorage: 初始化空存储
    
    User->>MapStorage: MapStorage()
    MapStorage->>MapStorage: 初始化map_存储
    
    User->>HashStorage: HashStorage()
    HashStorage->>HashStorage: 初始化hash存储
    
    %% 哈希表组件初始化
    User->>CellHashTable: CellHashTable()
    CellHashTable->>CellHashTable: 初始化哈希表
    
    User->>DenseCellHashTable: DenseCellHashTable()
    DenseCellHashTable->>DenseCellHashTable: 初始化密集哈希表

    %% ===== 线程安全和并发控制初始化 =====
    Note over User, MemoryMapping: 🔒 并发控制初始化 - 线程安全机制配置

    User->>TsVector: TsVector()
    TsVector->>TsVector: 初始化data_和mutex_
    
    User->>SeqLock: SeqLock()
    SeqLock->>SeqLock: seq_(0)
    
    User->>ParallelRunner: ParallelRunner(thread_count)
    ParallelRunner->>ParallelRunner: 初始化线程池
    
    User->>UniqueAccess: UniqueAccess()
    UniqueAccess->>UniqueAccess: 初始化访问控制
    
    User->>ArenaAllocator: ArenaAllocator()
    ArenaAllocator->>ArenaAllocator: 初始化内存池

    %% ===== RootCell和静态BOC初始化 =====
    Note over User, MemoryMapping: 📦 静态BOC系统初始化 - 根Cell和静态数据库配置

    User->>RootCell: create(cell, extra)
    RootCell->>RootCell: Ref<RootCell>(true, std::move(cell), std::forward<T>(extra), PrivateTag{})
    RootCell-->>User: Ref<RootCell>
    
    User->>StaticBOC: StaticBagOfCellsDb(root)
    StaticBOC->>StaticBOC: root_(std::move(root))
    
    User->>StaticBaseline: StaticBagOfCellsDbBaseline(root)
    StaticBaseline->>StaticBaseline: root_(std::move(root))
    
    User->>StaticLazy: StaticBagOfCellsDbLazy(root, loader)
    StaticLazy->>StaticLazy: root_(std::move(root)), loader_
    
    User->>StaticExtCell: StaticBocExtCell(cell, db)
    StaticExtCell->>StaticExtCell: cell_(std::move(cell)), db_(db)

    %% ===== Blob视图系统初始化 =====
    Note over User, MemoryMapping: 🗂️ Blob视图系统初始化 - 数据访问层配置

    User->>BufferSliceBlobView: create(td::BufferSlice slice)
    BufferSliceBlobView->>BufferSliceBlobViewImpl: BufferSliceBlobViewImpl(slice)
    BufferSliceBlobViewImpl->>BufferSliceBlobViewImpl: slice_(std::move(slice))
    BufferSliceBlobViewImpl-->>BufferSliceBlobView: 实现实例
    BufferSliceBlobView-->>User: BlobView实例
    
    User->>FileBlobView: create(td::CSlice file_path, td::uint64 file_size)
    FileBlobView->>FileFd: FileFd::open(file_path)
    FileFd-->>FileBlobView: 文件描述符
    FileBlobView->>FileBlobView: 验证文件大小
    FileBlobView->>FileBlobViewImpl: FileBlobViewImpl(fd, file_size)
    FileBlobViewImpl->>FileBlobViewImpl: 初始化文件大小参数和页面缓存
    FileBlobViewImpl-->>FileBlobView: 实现实例
    FileBlobView-->>User: BlobView实例
    
    User->>FileMemoryMappingBlobView: create(td::CSlice file_path, td::uint64 file_size)
    FileMemoryMappingBlobView->>MemoryMapping: MemoryMapping::create_from_file(file_path)
    MemoryMapping-->>FileMemoryMappingBlobView: 内存映射
    FileMemoryMappingBlobView->>FileMemoryMappingBlobViewImpl: FileMemoryMappingBlobViewImpl(mapping)
    FileMemoryMappingBlobViewImpl->>FileMemoryMappingBlobViewImpl: mapping_(std::move(mapping))
    FileMemoryMappingBlobViewImpl-->>FileMemoryMappingBlobView: 实现实例
    FileMemoryMappingBlobView-->>User: BlobView实例

    %% ===== 智能合约和事务系统初始化 =====
    Note over User, MemoryMapping: 🤖 智能合约系统初始化 - 合约管理和事务支持

    User->>SmartContractMeta: SmartContractMeta()
    SmartContractMeta->>SmartContractMeta: 初始化元数据
    
    User->>SmartContractDbImpl: SmartContractDbImpl()
    SmartContractDbImpl->>SmartContractDbImpl: 初始化合约数据库
    
    User->>TonDbTransactionImpl: TonDbTransactionImpl()
    TonDbTransactionImpl->>TonDbTransactionImpl: 初始化事务
    
    User->>KeyValue: KeyValue()
    KeyValue->>KeyValue: 初始化键值存储
    
    User->>BagOfCells: BagOfCells()
    BagOfCells->>BagOfCells: 初始化Cell包
    
    User->>ExtCellCreator: ExtCellCreator()
    ExtCellCreator->>ExtCellCreator: 初始化创建器

    %% ===== 核心业务操作阶段 =====
    Note over User, MemoryMapping: ⚡ 核心业务操作阶段 - 数据读写和处理

    %% 线程安全向量操作
    User->>TsVector: get(i)
    TsVector->>TsVector: std::lock_guard<std::mutex> guard(mutex_)
    TsVector->>TsVector: 检查索引范围
    TsVector-->>User: data_[i]
    
    User->>TsVector: set(i, value)
    TsVector->>TsVector: std::lock_guard<std::mutex> guard(mutex_)
    TsVector->>TsVector: 扩展data_大小如需要
    TsVector->>TsVector: data_[i] = std::move(value)

    %% 序列锁操作
    User->>SeqLock: lock_write()
    SeqLock->>SeqLock: seq_.fetch_add(1)
    SeqLock-->>User: WriteAccess
    
    User->>SeqLock: lock_read()
    SeqLock->>SeqLock: 读取seq_值
    SeqLock-->>User: ReadAccess

    %% 内存分配操作
    User->>ArenaAllocator: alloc(size)
    ArenaAllocator->>ArenaAllocator: 从内存池分配
    ArenaAllocator-->>User: 内存指针

    %% 计数器操作
    User->>CellCounter: inc()
    CellCounter->>CellCounter: 原子递增
    
    User->>CellCounter: dec()
    CellCounter->>CellCounter: 原子递减

    %% ===== Cell存储和加载操作 =====
    Note over User, MemoryMapping: 📊 Cell数据操作 - 存储、加载和管理

    %% 哈希表操作
    User->>CellHashTable: get_cell(hash)
    CellHashTable->>CellHashTable: 查找哈希对应的cell
    CellHashTable-->>User: cell或nullptr
    
    User->>CellHashTable: set_cell(hash, cell)
    CellHashTable->>CellHashTable: 存储cell到哈希表
    
    User->>DenseCellHashTable: get_cell(hash)
    DenseCellHashTable->>DenseCellHashTable: 高效查找cell
    DenseCellHashTable-->>User: cell或nullptr

    %% 动态BOC Cell加载
    User->>DynamicBocCellLoader: DynamicBocCellLoader(db)
    DynamicBocCellLoader->>DynamicBocCellLoader: db_(db)
    
    User->>DynamicBocCellLoader: load(hash, need_data, ext_cell_creator)
    DynamicBocCellLoader->>DBOC: load_cell(hash)
    DBOC-->>DynamicBocCellLoader: cell_data
    DynamicBocCellLoader->>CellLoader: parse(parser, ext_cell_creator)
    CellLoader->>ParserT: 读取Cell格式标识
    ParserT-->>CellLoader: 格式信息
    CellLoader->>CellLoader: 根据格式解析Cell数据
    CellLoader-->>DynamicBocCellLoader: loaded_cell
    DynamicBocCellLoader-->>User: loaded_cell

    %% Cell加载器核心功能
    User->>CellLoader: CellLoader(need_data)
    CellLoader->>CellLoader: need_data_(need_data)
    
    User->>CellLoader: parse(parser, ext_cell_creator)
    CellLoader->>ParserT: 读取Cell格式标识
    ParserT-->>CellLoader: 格式信息
    CellLoader->>CellLoader: 根据格式解析Cell数据
    CellLoader-->>User: loaded_cell

    %% =====
## 强化分析描述

对 `./src/dataset/agent-v1-c4/tonvm/code/cp/cp0.cpp` 进行**全函数覆盖分析**，该文件包含以下函数：

**已识别的所有函数:**
1. ✅ **init_op_cp0(bool enable_debug)** - 主要的公共函数，初始化操作码表
2. ✅ **set_debug_enabled(enable_debug)** - 调试系统配置函数
3. ✅ **OpcodeTable构造函数** - 创建操作码表实例
4. ✅ **register_stack_ops(*op_cp0)** - 注册栈操作函数
5. ✅ **register_tuple_ops(*op_cp0)** - 注册元组操作函数
6. ✅ **register_arith_ops(*op_cp0)** - 注册算术操作函数
7. ✅ **register_cell_ops(*op_cp0)** - 注册单元格操作函数
8. ✅ **register_continuation_ops(*op_cp0)** - 注册延续操作函数
9. ✅ **register_dictionary_ops(*op_cp0)** - 注册字典操作函数
10. ✅ **register_ton_ops(*op_cp0)** - 注册TON特定操作函数
11. ✅ **register_debug_ops(*op_cp0)** - 注册调试操作函数
12. ✅ **register_codepage_ops(*op_cp0)** - 注册代码页操作函数
13. ✅ **finalize()** - 操作码表最终化函数
14. ✅ **register_table(Codepage::test_cp)** - 代码页注册函数

**特殊模式分析:**
- 该文件使用**静态局部变量单例模式**，通过lambda表达式实现延迟初始化
- 所有函数调用都在lambda表达式内部执行，确保只初始化一次
- 返回类型为 `const OpcodeTable*`，确保操作码表的不可变性

## 强化后的完整业务流程图

```mermaid
sequenceDiagram
    participant Client as Client/VM
    participant CP0 as cp0.cpp::init_op_cp0
    participant OpcodeTable as OpcodeTable
    participant DebugSystem as Debug System
    participant StackOps as Stack Operations
    participant TupleOps as Tuple Operations
    participant ArithOps as Arithmetic Operations
    participant CellOps as Cell Operations
    participant ContOps as Continuation Operations
    participant DictOps as Dictionary Operations
    participant TonOps as TON Operations
    participant DebugOps as Debug Operations
    participant CodepageOps as Codepage Operations
    participant Codepage as Codepage Registry
    participant StaticInstance as Static Lambda Instance

    %% 初始化阶段 - 系统配置和实例创建
    Note over Client,Codepage: Phase 1: Initialization & Configuration
    Client->>CP0: init_op_cp0(bool enable_debug)
    Note over CP0: Check static_op_cp0 singleton instance
    
    %% 单例模式检查和Lambda执行
    CP0->>StaticInstance: Execute static lambda []
    Note over StaticInstance: First-time initialization or return cached instance
    
    %% 调试系统配置
    StaticInstance->>DebugSystem: set_debug_enabled(bool enable_debug)
    Note over DebugSystem: Configure debug mode globally
    DebugSystem-->>StaticInstance: void (debug configuration applied)
    
    %% 操作码表实例创建
    StaticInstance->>OpcodeTable: new OpcodeTable(const char* "TEST CODEPAGE", Codepage::test_cp)
    Note over OpcodeTable: Create opcode table with name and codepage enum
    OpcodeTable-->>StaticInstance: OpcodeTable* op_cp0
    
    %% 核心操作码注册阶段 - 按功能分组注册
    Note over StaticInstance,CodepageOps: Phase 2: Core Operations Registration
    
    %% 基础操作组
    rect rgb(240, 248, 255)
        Note over StaticInstance,TupleOps: Basic Operations Group
        StaticInstance->>StackOps: register_stack_ops(OpcodeTable& *op_cp0)
        Note over StackOps: Register stack manipulation opcodes (PUSH, POP, DUP, SWAP, etc.)
        StackOps-->>StaticInstance: void (stack operations registered)
        
        StaticInstance->>TupleOps: register_tuple_ops(OpcodeTable& *op_cp0)
        Note over TupleOps: Register tuple creation and access opcodes
        TupleOps-->>StaticInstance: void (tuple operations registered)
    end
    
    %% 数据处理操作组
    rect rgb(248, 255, 240)
        Note over StaticInstance,CellOps: Data Processing Group
        StaticInstance->>ArithOps: register_arith_ops(OpcodeTable& *op_cp0)
        Note over ArithOps: Register arithmetic opcodes (ADD, SUB, MUL, DIV, MOD, etc.)
        ArithOps-->>StaticInstance: void (arithmetic operations registered)
        
        StaticInstance->>CellOps: register_cell_ops(OpcodeTable& *op_cp0)
        Note over CellOps: Register cell serialization/deserialization opcodes
        CellOps-->>StaticInstance: void (cell operations registered)
    end
    
    %% 高级功能操作组
    rect rgb(255, 248, 240)
        Note over StaticInstance,DictOps: Advanced Features Group
        StaticInstance->>ContOps: register_continuation_ops(OpcodeTable& *op_cp0)
        Note over ContOps: Register continuation and control flow opcodes
        ContOps-->>StaticInstance: void (continuation operations registered)
        
        StaticInstance->>DictOps: register_dictionary_ops(OpcodeTable& *op_cp0)
        Note over DictOps: Register dictionary/hashmap opcodes
        DictOps-->>StaticInstance: void (dictionary operations registered)
    end
    
    %% 专用操作组
    rect rgb(255, 240, 248)
        Note over StaticInstance,CodepageOps: Specialized Operations Group
        StaticInstance->>TonOps: register_ton_ops(OpcodeTable& *op_cp0)
        Note over TonOps: Register TON blockchain specific opcodes
        TonOps-->>StaticInstance: void (TON operations registered)
        
        StaticInstance->>DebugOps: register_debug_ops(OpcodeTable& *op_cp0)
        Note over DebugOps: Register debugging and introspection opcodes
        DebugOps-->>StaticInstance: void (debug operations registered)
        
        StaticInstance->>CodepageOps: register_codepage_ops(OpcodeTable& *op_cp0)
        Note over CodepageOps: Register codepage switching opcodes
        CodepageOps-->>StaticInstance: void (codepage operations registered)
    end
    
    %% 最终化和注册阶段
    Note over StaticInstance,Codepage: Phase 3: Finalization & Registration
    StaticInstance->>OpcodeTable: op_cp0->finalize()
    Note over OpcodeTable: Validate opcode table, resolve conflicts, optimize lookup
    OpcodeTable-->>StaticInstance: OpcodeTable* (finalized table)
    
    StaticInstance->>Codepage: register_table(Codepage::test_cp)
    Note over Codepage: Register finalized table in global codepage registry
    Codepage-->>StaticInstance: void (table registered with test_cp enum)
    
    %% Lambda返回和最终结果
    Note over StaticInstance,Client: Phase 4: Return Initialized Table
    StaticInstance-->>CP0: return OpcodeTable* op_cp0
    Note over CP0: Store in static_op_cp0 for singleton pattern
    CP0-->>Client: return const OpcodeTable* static_op_cp0
    Note over Client: Ready for TonVM instruction execution with complete opcode set
    
    %% 后续调用优化
    Note over Client,CP0: Phase 5: Subsequent Calls (Singleton Optimization)
    Client->>CP0: init_op_cp0(bool enable_debug) [subsequent calls]
    Note over CP0: Return cached static_op_cp0 without re-initialization
    CP0-->>Client: return const OpcodeTable* static_op_cp0 [cached]
```